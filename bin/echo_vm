#!/usr/bin/env python3

"""Usage: %prog [options] file

Runs 'file' via the echo interpreter in a Python-driver-replacement style. For
example:

    python3 echo_vm.py /tmp/example.py

This allows comparisons of echo versus the standard CPython interpreter driver
on the command line.
"""

import contextlib
import logging
import optparse
import os
import pdb
import sys
import types
from typing import Any, Text, Tuple

from echo import interp
from echo import ebuiltins
from echo import emodule
from echo import etraceback
from echo import interp_context
from echo import import_routines
from echo import bytecode_trace
from echo.interp_result import Result

import termcolor


def _print_surrounding(filename: Text, lineno: int) -> None:
    with open(filename) as f:
        lines = list(enumerate((l.rstrip() for l in f), start=1))
    print(f' {filename}:{lineno}', file=sys.stderr)
    for i, line in lines[max(lineno-8, 0):lineno+8]:
        arrow = termcolor.colored('==>', 'blue') if i == lineno else '   '
        line_str = termcolor.colored(f'{i:6d}', 'yellow')
        print(f' {arrow} {line_str}  {line}', file=sys.stderr)


def _handle_result(result: Result[Any]) -> int:
    if result.is_exception():
        termcolor.cprint(repr(result.get_exception().exception), color='red', file=sys.stderr)
        tb = result.get_exception().traceback
        assert isinstance(tb, etraceback.ETraceback)
        for filename, lineno in etraceback.walk(tb):
            _print_surrounding(filename, lineno)
        termcolor.cprint(str(result), color='red', file=sys.stderr)
        error = True
    else:
        error = False

    return -1 if error else 0


@contextlib.contextmanager
def suppress_env_vars(names: Tuple[Text, ...]):
    olds = {}
    for name in names:
        olds[name] = os.environ.pop(name, None)
    yield
    for k, v in olds.items():
        if v is not None:
            os.environ[k] = v


def main() -> int:
    parser = optparse.OptionParser(__doc__)
    parser.add_option('--log_level', choices=['DEBUG', 'INFO', 'WARNING'],
                      help='Log level to use.')
    parser.add_option('--pdb', action='store_true', default=False,
                      help='Drop into PDB on error.')
    parser.add_option('-c', default=None,
                      help='Literal text to execute.')
    parser.add_option('--dump_trace', help='Path to dump bytecode trace to.')
    parser.add_option('--preload', default='', help='Modules to pre-load before potentially dumping instructions.')
    opts, args = parser.parse_args()

    # Options.
    if opts.log_level:
        logging.basicConfig(level=getattr(logging, opts.log_level))

    if opts.c:
        state = interp.InterpreterState(os.getcwd())
        module_code = compile(opts.c, '<text>', 'exec')
        ictx = interp_context.ICtx(state, interp.interp, interp.do_call)
        result = ictx.interp_callback(module_code, globals_={}, in_function=False,
                             name='__main__', ictx=ictx)
        return _handle_result(result)

    # Path.
    if len(args) < 1:
        parser.error('A single file argument is required')

    path, *rest = args
    sys.argv = rest

    fullpath = os.path.realpath(args[0])
    globals_ = {}
    globals_['__file__'] = fullpath

    state = interp.InterpreterState(os.path.dirname(fullpath))
    state.paths = sys.path[1:] + state.paths
    fully_qualified = '__main__'

    builtins = emodule.EModule('builtins', filename='<built-in>', globals_=ebuiltins.make_ebuiltins())
    ictx = interp_context.ICtx(state, interp.interp, interp.do_call, builtins)

    with suppress_env_vars(('ECHO_DUMP_INSTS', 'ECHO_DEBUG')):
        if opts.preload:
            for mod in opts.preload.split(','):
                assert not import_routines.run_IMPORT_NAME('fake', 0, (), mod, dict(__name__=mod), ictx).is_exception()

    try:
        result = interp.import_path(fullpath, fully_qualified, fully_qualified,
                                    ictx)
    except Exception as e:
        if opts.pdb:
            pdb.post_mortem(e.__traceback__)
            sys.exit(-1)
        else:
            raise

    return _handle_result(result)


if __name__ == '__main__':
    sys.exit(main())
